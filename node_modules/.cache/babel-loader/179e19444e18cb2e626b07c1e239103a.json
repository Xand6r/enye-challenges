{"ast":null,"code":"import React from'react';import{Form,Icon,Input,Button,DatePicker,message,InputNumber}from'antd';import{useDispatch}from'react-redux';import addUser from\"../actions/addUser\";var TextArea=Input.TextArea;function InputForm(props){// create a dispatch object for our actions\nvar Dispatch=useDispatch();// add a success message to display if the info was sucessfuly saved\nvar success=function success(){message.loading('Saving to database..',1.5).then(function(){return message.success('Finished saving',0.5);})//Clear the input field after all is said and done\n.then(function(){return props.form.resetFields();});};// method to be called upon submission of the form\nvar handleSubmit=function handleSubmit(e){e.preventDefault();props.form.validateFields(function(err,values){// if there was no error save the information\nvar enteredYear=values['date-picker'].year();var calculatedAge=new Date().getFullYear()-Number(enteredYear);if(calculatedAge!==Number(values['age'])){message.error(\"Your age is incorrect, please align it with your year of birth!\",1.0);return;}if(!err){// send the field items to the app's state\nDispatch(addUser(values));success();}else{message.error(\"there was an error saving, please try again!\",1.0);}});};// defining some constants for use  \nvar getFieldDecorator=props.form.getFieldDecorator;var config={rules:[{type:'object',required:true,message:'Please select time!'}]};var margin={marginRight:\"15px\"};// return the JSX to be displayed as the template\nreturn React.createElement(Form,{onSubmit:handleSubmit,style:styles['loginForm']},React.createElement(\"div\",{style:styles[\"titleBar\"]},React.createElement(\"h3\",{style:styles[\"title\"]},\"DATA\")),React.createElement(Form.Item,null,getFieldDecorator('firstName',{rules:[{required:true,message:'Please input your first name!'}]})(React.createElement(Input,{prefix:React.createElement(Icon,{type:\"user\",style:{color:'rgba(0,0,0,.95)'}}),placeholder:\"first name\"}))),React.createElement(Form.Item,null,getFieldDecorator('lastName',{rules:[{required:true,message:'Please input your last name!'}]})(React.createElement(Input,{prefix:React.createElement(Icon,{type:\"user\",style:{color:'rgba(0,0,0,.95)'}}),placeholder:\"last name\"}))),React.createElement(\"div\",{style:styles[\"flexContainer\"]},React.createElement(Form.Item,{style:margin},getFieldDecorator('date-picker',config)(React.createElement(DatePicker,null))),React.createElement(Form.Item,null,getFieldDecorator('age',{rules:[{required:true,message:'Please input your age!'}]})(React.createElement(InputNumber,{min:0,prefix:React.createElement(Icon,{type:\"number\",style:{color:'rgba(0,0,0,.95)'}}),placeholder:\"age\"})))),React.createElement(Form.Item,null,getFieldDecorator('hobbies',{rules:[{required:true,message:'Please input your Hobbies!'}]})(React.createElement(TextArea,{rows:4,prefix:React.createElement(Icon,{type:\"text\",style:{color:'rgba(0,0,0,.95)'}}),placeholder:\"Enter your hobbies\"}))),React.createElement(Form.Item,null,React.createElement(Button,{style:styles['buttonStyle'],type:\"primary\",htmlType:\"submit\"},\"Submit\")));}var WrappedNormalLoginForm=Form.create({name:'normal_login'})(InputForm);// styles for this component\nvar styles={loginForm:{maxWidth:\"500px\"},titleBar:{textAlign:\"center\",marginBottom:\"60px\"},title:{fontSize:\"30px\",color:\"rgb(34, 58, 109)\"},flexContainer:{display:\"flex\",flexWrap:\"wrap\",justifyContent:\"space-between\"},buttonStyle:{width:\"120px\",marginLeft:\"calc(50% - 60px)\",marginTop:\"30px\"}};export default WrappedNormalLoginForm;","map":{"version":3,"sources":["/home/xander/Documents/workspace/enye/form/src/components/InputForm.js"],"names":["React","Form","Icon","Input","Button","DatePicker","message","InputNumber","useDispatch","addUser","TextArea","InputForm","props","Dispatch","success","loading","then","form","resetFields","handleSubmit","e","preventDefault","validateFields","err","values","enteredYear","year","calculatedAge","Date","getFullYear","Number","error","getFieldDecorator","config","rules","type","required","margin","marginRight","styles","color","WrappedNormalLoginForm","create","name","loginForm","maxWidth","titleBar","textAlign","marginBottom","title","fontSize","flexContainer","display","flexWrap","justifyContent","buttonStyle","width","marginLeft","marginTop"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Icon, Input, Button, DatePicker,message, InputNumber} from 'antd'\nimport { useDispatch } from 'react-redux'\nimport addUser from \"../actions/addUser\"\n\nconst {TextArea} = Input;\n\n\n\nfunction InputForm(props) {\n    // create a dispatch object for our actions\n    const Dispatch=useDispatch();\n    \n    // add a success message to display if the info was sucessfuly saved\n    const success = () => {\n        message\n          .loading('Saving to database..', 1.5)\n          .then(() => message.success('Finished saving', 0.5))\n\n            //Clear the input field after all is said and done\n          .then(()=> props.form.resetFields());\n      };\n\n    // method to be called upon submission of the form\n    const handleSubmit=e=>{\n        e.preventDefault();\n\n        props.form.validateFields((err,values)=>{\n            // if there was no error save the information\n            const enteredYear=values['date-picker'].year();\n            var calculatedAge = new Date().getFullYear() - Number(enteredYear);\n\n            if (calculatedAge !== Number(values['age'])){\n                message.error(\"Your age is incorrect, please align it with your year of birth!\",1.0);\n                return;\n            }\n            \n            if(!err){\n                // send the field items to the app's state\n                Dispatch(addUser(values))\n                success();\n            }\n            else{\n                message.error(\"there was an error saving, please try again!\",1.0);\n            }\n        })\n    }\n\n    // defining some constants for use  \n    const {getFieldDecorator} = props.form;\n    const config = {\n        rules: [{ type: 'object', required: true, message: 'Please select time!' }],\n    };\n\n    const margin={\n        marginRight:\"15px\"\n    }\n\n    // return the JSX to be displayed as the template\n    return (\n        <Form onSubmit={handleSubmit} style={styles['loginForm']}>\n            <div style={styles[\"titleBar\"]}>\n                <h3 style={styles[\"title\"]}>DATA</h3>\n            </div>\n            {/* form item for the first name */}\n            <Form.Item>\n\n                {getFieldDecorator('firstName', {\n                    rules: [{ required: true, message: 'Please input your first name!' }],\n                })(\n                    <Input\n                    prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.95)' }} />}\n                    placeholder=\"first name\"\n                    />,\n                   )}\n\n            </Form.Item>\n            {/* form item for the first name */}\n\n            {/* form item for the last name */}\n            <Form.Item>\n\n                {getFieldDecorator('lastName', {\n                    rules: [{ required: true, message: 'Please input your last name!' }],\n                })(\n                    <Input\n                    prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.95)' }} />}\n                    placeholder=\"last name\"\n                    />,\n                  )}\n\n            </Form.Item>\n            {/* form item for the last name */}\n            \n            <div style={styles[\"flexContainer\"]}>\n\n                {/* form item for the date picker */}\n                <Form.Item style={margin} >\n                    {getFieldDecorator('date-picker', config)(<DatePicker />)}\n                </Form.Item>\n                {/* form item for the date picker */}\n                                \n                {/* form item for the last name */}\n                <Form.Item>\n                {getFieldDecorator('age', {\n                    rules: [{ required: true, message: 'Please input your age!' }],\n                })(\n                    <InputNumber\n                    min={0}\n                    prefix={<Icon type=\"number\" style={{ color: 'rgba(0,0,0,.95)' }} />}\n                    placeholder=\"age\"\n                    />,\n                  )}\n                </Form.Item>\n                {/* form item for the last name */}\n            \n            </div>\n\n            {/* form item for the Hobbies */}\n            <Form.Item>\n            {getFieldDecorator('hobbies', {\n                rules: [{ required: true, message: 'Please input your Hobbies!' }],\n            })(\n                <TextArea\n                rows={4}\n                prefix={<Icon type=\"text\" style={{ color: 'rgba(0,0,0,.95)' }} />}\n                placeholder=\"Enter your hobbies\"\n                />,\n              )}\n            </Form.Item>\n            {/* form item for the Hobbies*/}\n\n            {/* form item for the submit button */}\n            <Form.Item>\n\n                <Button style={styles['buttonStyle']} type=\"primary\" htmlType=\"submit\">\n                    Submit\n                </Button>\n\n            </Form.Item>\n            {/* form item for the submit button */}\n\n        </Form>\n    )\n}\n\n\nconst WrappedNormalLoginForm = Form.create({ name: 'normal_login' })(InputForm);\n\n\n// styles for this component\nconst styles={\n    loginForm:{\n        maxWidth: \"500px\"\n    },\n    titleBar:{\n        textAlign: \"center\",marginBottom: \"60px\"\n    },\n    title:{\n        fontSize: \"30px\",color: \"rgb(34, 58, 109)\"\n    },\n    flexContainer:{\n        display: \"flex\",flexWrap: \"wrap\",justifyContent: \"space-between\"\n    },\n    buttonStyle:{\n        width:\"120px\",marginLeft:\"calc(50% - 60px)\",marginTop:\"30px\"\n    }\n}\n\n\n\nexport default WrappedNormalLoginForm"]},"metadata":{},"sourceType":"module"}