{"ast":null,"code":"var _jsxFileName = \"/home/xander/Documents/workspace/enye/form/src/components/InputForm.js\";\nimport React, { Component } from 'react';\nimport { Form, Icon, Input, Button, DatePicker, message } from 'antd';\nconst TextArea = Input.TextArea;\n\nclass InputForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.success = () => {\n      message.loading('Saving to database..', 2.5).then(() => message.success('Loading finished', 2.5)).then(() => message.info('Loading finished is finished', 2.5)).then(() => this.props.form.resetFields());\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          // send the field items to the app's state\n          this.props.customValidator(values);\n          this.success(); // clear all the fields\n        }\n      });\n    };\n  }\n\n  render() {\n    // defining some constants for use  \n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const config = {\n      rules: [{\n        type: 'object',\n        required: true,\n        message: 'Please select time!'\n      }]\n    };\n    const small = {\n      marginRight: \"15px\"\n    }; // return the JSX to be displayed as the template\n\n    return React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"login-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"titleBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"DATA\")), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, getFieldDecorator('firstName', {\n      rules: [{\n        required: true,\n        message: 'Please input your first name!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"user\",\n        style: {\n          color: 'rgba(0,0,0,.95)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }),\n      placeholder: \"first name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, getFieldDecorator('lastName', {\n      rules: [{\n        required: true,\n        message: 'Please input your last name!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"user\",\n        style: {\n          color: 'rgba(0,0,0,.95)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }),\n      placeholder: \"last name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"flex-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      style: small,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, getFieldDecorator('date-picker', config)(React.createElement(DatePicker, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, getFieldDecorator('age', {\n      rules: [{\n        required: true,\n        message: 'Please input your last age!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"number\",\n        style: {\n          color: 'rgba(0,0,0,.95)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }),\n      placeholder: \"age\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, getFieldDecorator('hobbies', {\n      rules: [{\n        required: true,\n        message: 'Please input your Hobbies!'\n      }]\n    })(React.createElement(TextArea, {\n      rows: 4,\n      prefix: React.createElement(Icon, {\n        type: \"text\",\n        style: {\n          color: 'rgba(0,0,0,.95)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }),\n      placeholder: \"Enter your hobbies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Button, {\n      style: {\n        width: \"120px\",\n        marginLeft: \"calc(50% - 60px)\"\n      },\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"login-form-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nconst WrappedNormalLoginForm = Form.create({\n  name: 'normal_login'\n})(InputForm);\nexport default WrappedNormalLoginForm;","map":{"version":3,"sources":["/home/xander/Documents/workspace/enye/form/src/components/InputForm.js"],"names":["React","Component","Form","Icon","Input","Button","DatePicker","message","TextArea","InputForm","success","loading","then","info","props","form","resetFields","handleSubmit","e","preventDefault","validateFields","err","values","customValidator","render","getFieldDecorator","config","rules","type","required","small","marginRight","color","width","marginLeft","WrappedNormalLoginForm","create","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Icon, Input, Button, DatePicker,message} from 'antd'\nconst {TextArea} = Input;\n\n\n\nclass InputForm extends Component {\n    success = () => {\n        message\n          .loading('Saving to database..', 2.5)\n          .then(() => message.success('Loading finished', 2.5))\n          .then(() => message.info('Loading finished is finished', 2.5))\n          .then(()=> this.props.form.resetFields());\n      };\n\n    // method to be called upon submission of the form\n    handleSubmit=e=>{\n        e.preventDefault();\n        this.props.form.validateFields((err,values)=>{\n            if(!err){\n                // send the field items to the app's state\n                this.props.customValidator(values);\n                this.success();\n                // clear all the fields\n            }\n        })\n    }\n\n    render() {\n        // defining some constants for use  \n        const {getFieldDecorator} = this.props.form;\n        const config = {\n            rules: [{ type: 'object', required: true, message: 'Please select time!' }],\n        };\n\n        const small={\n            marginRight:\"15px\"\n        }\n\n        // return the JSX to be displayed as the template\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <div className=\"titleBar\">\n                    <h3>DATA</h3>\n                </div>\n                {/* form item for the first name */}\n                <Form.Item>\n\n                    {getFieldDecorator('firstName', {\n                        rules: [{ required: true, message: 'Please input your first name!' }],\n                    })\n                    (\n                        <Input\n                        prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.95)' }} />}\n                        placeholder=\"first name\"\n                        />,\n                    )}\n\n                </Form.Item>\n                {/* form item for the first name */}\n\n                {/* form item for the last name */}\n                <Form.Item>\n\n                    {getFieldDecorator('lastName', {\n                        rules: [{ required: true, message: 'Please input your last name!' }],\n                    })\n                    (\n                        <Input\n                        prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.95)' }} />}\n                        placeholder=\"last name\"\n                        />,\n                    )}\n\n                </Form.Item>\n                {/* form item for the last name */}\n                \n                <div className=\"flex-container\">\n\n                    {/* form item for the date picker */}\n                    <Form.Item style={small} >\n                        {getFieldDecorator('date-picker', config)(<DatePicker />)}\n                    </Form.Item>\n                    {/* form item for the date picker */}\n                                    \n                    {/* form item for the last name */}\n                    <Form.Item>\n                    {getFieldDecorator('age', {\n                        rules: [{ required: true, message: 'Please input your last age!' }],\n                    })\n                    (\n                        <Input\n                        prefix={<Icon type=\"number\" style={{ color: 'rgba(0,0,0,.95)' }} />}\n                        placeholder=\"age\"\n                        />,\n                    )}\n                    </Form.Item>\n                    {/* form item for the last name */}\n                \n                </div>\n\n                {/* form item for the Hobbies */}\n                <Form.Item>\n                {getFieldDecorator('hobbies', {\n                    rules: [{ required: true, message: 'Please input your Hobbies!' }],\n                })\n                (\n                    <TextArea\n                    rows={4}\n                    prefix={<Icon type=\"text\" style={{ color: 'rgba(0,0,0,.95)' }} />}\n                    placeholder=\"Enter your hobbies\"\n                    />,\n                )}\n                </Form.Item>\n                {/* form item for the Hobbies*/}\n\n                {/* form item for the submit button */}\n                <Form.Item>\n\n                    <Button style={{width:\"120px\",marginLeft:\"calc(50% - 60px)\"}} type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Submit\n                    </Button>\n\n                </Form.Item>\n                {/* form item for the submit button */}\n\n            </Form>\n        )\n    }\n}\n\nconst WrappedNormalLoginForm = Form.create({ name: 'normal_login' })(InputForm);\nexport default WrappedNormalLoginForm"]},"metadata":{},"sourceType":"module"}